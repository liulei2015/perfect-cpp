#include "BeanUndef.h"

#define MO_TRANS_STRUCT_BEGIN(...)
#define MO_TRANS_STRUCT_END

#define BEAN_SUCCESS 0
#define BEAN_FAIL -1

#define BEAN_BYTE(NAME, KEY, PATH, MONAME, ...) BYTE NAME;
#define BEAN_WORD16(NAME, KEY, PATH, MONAME, ...) WORD16 NAME;
#define BEAN_WORD32(NAME, KEY, PATH, MONAME, ...) WORD32 NAME;

#define BEAN_BYTE_NOTFOUND(NAME, ...) BYTE NAME;
#define BEAN_WORD16_NOTFOUND(NAME, ...) WORD16 NAME;
#define BEAN_WORD32_NOTFOUND(NAME, ...) WORD32 NAME;

#define BEAN_BYTE_NOTSURE(NAME, ...) BYTE NAME;
#define BEAN_WORD16_NOTSURE(NAME, ...) WORD16 NAME;
#define BEAN_WORD32_NOTSURE(NAME, ...) WORD32 NAME;

#define BEAN_BYTE_TRANS BEAN_BYTE
#define BEAN_WORD16_TRANS BEAN_WORD16
#define BEAN_WORD32_TRANS BEAN_WORD32

#define BEAN_BYTE_TRANS_WITH BEAN_BYTE
#define BEAN_WORD16_TRANS_WITH BEAN_WORD16
#define BEAN_WORD32_TRANS_WITH BEAN_WORD32

#define BEAN_BYTE_ARRAY(NAME, SIZE, KEY, PATH, MONAME, ...) BYTE NAME SIZE;
#define BEAN_WORD16_ARRAY(NAME, SIZE, KEY, PATH, MONAME, ...) WORD16 NAME SIZE;
#define BEAN_WORD32_ARRAY(NAME, SIZE, KEY, PATH, MONAME, ...) WORD32 NAME SIZE;

#define BEAN_BYTE_ARRAY_ALIAS(NAME, SIZE, KEY, PATH, ALIAS, ...) BYTE NAME SIZE;
#define BEAN_WORD16_ARRAY_ALIAS(NAME, SIZE, KEY, PATH, ALIAS, ...) WORD16 NAME SIZE;
#define BEAN_WORD32_ARRAY_ALIAS(NAME, SIZE, KEY, PATH, ALIAS, ...) WORD32 NAME SIZE;

#define BEAN_BYTE_ARRAY_TRANS   BEAN_BYTE_ARRAY
#define BEAN_WORD16_ARRAY_TRANS BEAN_WORD16_ARRAY
#define BEAN_WORD32_ARRAY_TRANS BEAN_WORD32_ARRAY

#define BEAN_BYTE_SIZE(NAME, KEY, PATH, ...) BYTE NAME;
#define BEAN_WORD16_SIZE(NAME, KEY, PATH, ...) WORD16 NAME;
#define BEAN_WORD32_SIZE(NAME, KEY, PATH, ...) WORD32 NAME;

#define BEAN_BYTE_ALIAS BEAN_BYTE
#define BEAN_WORD16_ALIAS BEAN_WORD16
#define BEAN_WORD32_ALIAS BEAN_WORD32

#define BEAN_BYTE_MULT_NODES BEAN_BYTE
#define BEAN_WORD16_MULT_NODES BEAN_WORD16
#define BEAN_WORD32_MULT_NODES BEAN_WORD32

#define BEAN_IF_HAS_ITEM(NAME, KEY, PATH, ITEM) BYTE NAME

#define BEAN_STRUCT(STRUCT, NAME) STRUCT NAME;
#define BEAN_STRUCT_ARRAY(STRUCT, NAME, SIZE) STRUCT NAME SIZE;

#define BEAN_STRUCT_ALIAS(STRUCT, NAME, KEY, PATH, ALIAS) STRUCT NAME;

#define BEAN_DEF(NAME, ...) struct NAME __VA_ARGS__ {
#define BEAN_DEF_END template<class T> int setProperties(const T& j, int arrayIndex = 0xFFFF);\
};

#define BEAN_USE(...) __VA_ARGS__
#define BEAN_HAS_KEY(KEY) const char* KEY;
#define BEAN_REALIZE(...)

#define BEAN_INIT(NAME, ...) void init(__VA_ARGS__);
#define BEAN_USE_KEY(PARAM_NAME) BEAN_HAS_KEY(PARAM_NAME)
#define BEAN_SUB_USE_KEY(STRUCT_NAME, PARAM_NAME)
#define BEAN_SUB_ARRAY_USE_KEY(STRUCT_NAME, SIZE, ...)
#define BEAN_INIT_END
#define BEAN_USE_KEY_WITH_INIT(NAME, KEY) \
    BEAN_INIT(NAME, const char* KEY)\
        BEAN_USE_KEY(KEY)\
    BEAN_INIT_END
    
#define BEAN_DEF_WITH(NAME, INIT, ...) BEAN_DEF(NAME, __VA_ARGS__) INIT
#define BEAN_DEF_END_WITH(...) template<class T> int setProperties(const T& j, int arrayIndex = 0xFFFF);\
    __VA_ARGS__ \
};
#define BEAN_DEF_END_WITH_INIT(NAME, KEY, ...) BEAN_USE_KEY_WITH_INIT(NAME, KEY) BEAN_DEF_END_WITH(__VA_ARGS__)

#define BEAM_EXTEND(NAME, PARENT_NAME, ...) ;BEAN_DEF(NAME, :PARENT_NAME) BEAN_DEF_END

