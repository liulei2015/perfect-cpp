#ifndef INCL_USI_LOG_LOG_H
#define INCL_USI_LOG_LOG_H

#include "l0-infra/base/BaseTypes.h"
#include "l0-infra/base/Status.h"
#include "l0-infra/log/TraceMeSwitch.h"

#ifdef __cplusplus
extern "C" {
#endif

#if defined(_MSC_VER) || defined(USI_FT)
# define  BASE_NAME(fileName)  getBaseName(fileName)
#else
# define  BASE_NAME(fileName)  fileName
#endif

#define	DEBUG_LEVEL		(BYTE)0x01    /* 姝ｅ父杩愯鐨勭粏鑺� */
#define	INFO_LEVEL		(BYTE)0x02    /* 姝ｅ父杩愯 */
#define	WARN_LEVEL		(BYTE)0x04    /* 璀﹀憡 */
#define	ERROR_LEVEL		(BYTE)0x08    /* 鏅�氶敊璇� */
#define	FATAL_LEVEL		(BYTE)0x10    /* 鑷村懡閿欒 */

#define   RRMCELL_MODULE  (U16)1
#define   MCMCELL_MODULE  (U16)2
#define   RRMUE_MODULE  (U16)3
#define   RRMLM_MODULE  (U16)4
#define   CCMMAIN_MODULE  (U16)5
#define   CCMINST_MODULE  (U16)6
#define   DCMMAIN_MODULE  (U16)7
#define   DCMINST_MODULE  (U16)8
#define   USF_MODULE     (U16)9
#define   FT_MODULE		(U16)10
#define   CPM_MODULE		(U16)11

//void failedStatistic(const char* file, WORD32 line);
const char* getBaseName(const char* absPath);

// __SHORT_FILE__ is generated by make script, but CMAKE do not it.
#if defined(USI_FT)
#ifndef __SHORT_FILE__
#define __SHORT_FILE__  __FILE__
#endif
#else
#ifndef __SHORT_FILE__
#define __SHORT_FILE__  __FILE__
#endif
#endif

#define DECL_LOG_TRACE(name) \
void _##name(const char* file, WORD32 line, const  char* fmt, ...)

#if defined(USI_FT)
#define SWITCH_CHECK_OUT
#define SWITCH_CHECK_IN  if(1)
#define DEBUG_SWITCH_CHECK_IN if(0)
#define DEBUG_SWITCH_CHECK_OUT
#else
#define SWITCH_CHECK_OUT  if(0)
#define SWITCH_CHECK_IN
#define DEBUG_SWITCH_CHECK_IN
#define DEBUG_SWITCH_CHECK_OUT if(0)
#endif

#define INVOKE_LOG_TRACE(name, fmt, ...)                   \
        do{                                                   \
            SWITCH_CHECK_OUT\
            {\
                _##name(__SHORT_FILE__, __LINE__, fmt, ##__VA_ARGS__);\
            }\
        }while(0)

#define INVOKE_DEBUG_LOG_TRACE(name, fmt, ...)   \
    do{                                          \
        DEBUG_SWITCH_CHECK_OUT \
        {\
            _##name(__SHORT_FILE__, __LINE__, fmt, ##__VA_ARGS__);\
        }\
    }while(0)


#define INVOKE_LOG_TRACE_WITH_STAST(name, fmt, ...)       \
do{                                                       \
    SWITCH_CHECK_OUT\
    { \
    INVOKE_LOG_TRACE(name, fmt, ##__VA_ARGS__);\
    }  \
}while(0)

extern "C" void uniLog(U16 softmodule,
                       const char *pcFileName,
                       U32  dwLineNum, BYTE ucPrtLevel,
                       const char *pchPrtInfo, ...);


#define UNI_LOG(softmodule, level, format, ...) \
    uniLog(softmodule, __SHORT_FILE__, __LINE__, level, format, ##__VA_ARGS__)

#if !(defined(USI_TRACE))
#define USI_TRACE(level, format, ...) \
    UNI_LOG(USF_MODULE, level, format, ##__VA_ARGS__)
#endif

#define FATAL_LOG(fmt, ...)    USI_TRACE(FATAL_LEVEL, fmt, ##__VA_ARGS__)
#define ERR_LOG(fmt, ...)      USI_TRACE(ERROR_LEVEL, fmt, ##__VA_ARGS__)
#define WARN_LOG(fmt, ...)     USI_TRACE(WARN_LEVEL, fmt, ##__VA_ARGS__)
#define INFO_LOG(fmt, ...)     USI_TRACE(INFO_LEVEL, fmt, ##__VA_ARGS__)
#define DBG_LOG(fmt, ...)      USI_TRACE(DEBUG_LEVEL, fmt, ##__VA_ARGS__)

#define FT_ERR_LOG(fmt, ...)   USI_TRACE(FATAL_LEVEL, fmt, ##__VA_ARGS__)
#define PRINT_LOG(fmt, ...)   \
    printf(fmt, ##__VA_ARGS__);\
    printf("\n");

#ifdef __cplusplus
}
#endif

#endif

